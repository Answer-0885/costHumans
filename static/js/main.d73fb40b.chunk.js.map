{"version":3,"sources":["components/UI/ErrorModal.module.css","components/UI/Card.module.css","components/UI/Button.module.css","components/Users/CreateUser.module.css","components/Users/UserList.module.css","components/UI/Card.js","components/UI/Button.js","components/UI/ErrorModal.js","components/Users/CreateUser.js","components/Users/UserLIst.js","App.js","index.js"],"names":["module","exports","Card","props","className","styles","card","children","Button","button","type","onClick","Backdrop","backdrop","onCloseModal","Modal","modal","header","title","content","message","actions","ErrorModal","Fragment","ReactDOM","createPortal","document","getElementById","CreateUser","nameInputRef","useRef","ageInputRef","useState","error","setError","input","onSubmit","event","preventDefault","inputUserName","current","value","inputUserAge","trim","length","onCreateUser","htmlFor","id","ref","UserList","users","map","user","name","age","App","userList","setUserList","prevUserList","Math","random","toString","render"],"mappings":"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","file":"static/js/main.d73fb40b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"ErrorModal_backdrop__3erMK\",\"modal\":\"ErrorModal_modal__2DxUQ\",\"header\":\"ErrorModal_header__2wXN4\",\"content\":\"ErrorModal_content__1FLuG\",\"actions\":\"ErrorModal_actions__wHDmy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__8fScX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3EboI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"CreateUser_input__uX0e5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"UserList_users__1wTyh\"};","import styles from\"./Card.module.css\"\r\n\r\nconst Card = (props) => {\r\n    return(\r\n        <div className={`${styles.card} ${props.className}`}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\nexport default Card;","import styles from './Button.module.css'\r\n\r\nconst Button = (props) => {\r\n    return (\r\n    <button className={styles.button} type={props.type || 'button'} onClick={props.onClick}> \r\n        {props.children}\r\n    </button>\r\n    )\r\n}\r\nexport default Button;","import Card from \"./Card\";\r\nimport Button from \"./Button\";\r\nimport styles from \"./ErrorModal.module.css\";\r\nimport React from \"react\";\r\n// Подключаем чтобы создать портал\r\nimport ReactDOM from \"react-dom\";\r\n\r\n// Описание работы заднего фона модального окна\r\nconst Backdrop = (props)=> {\r\n  return <div className={styles.backdrop} onClick={props.onCloseModal}></div>\r\n}\r\n// Описание работы модального окна\r\nconst Modal = (props) => {\r\n  return(\r\n    <Card className={styles.modal}>\r\n    <header className={styles.header}>\r\n      <h2>{props.title}</h2>\r\n    </header>\r\n    <div className={styles.content}>\r\n      <p>{props.message}</p>\r\n    </div>\r\n    <footer className={styles.actions}>\r\n      <Button onClick={props.onCloseModal}>Закрыть</Button>\r\n    </footer>\r\n  </Card>\r\n  )\r\n}\r\n\r\nconst ErrorModal = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n             {/* Создаём порталы для заднего фона окна */}\r\n      {ReactDOM.createPortal(<Backdrop onCloseModal={props.onCloseModal}/>, document.getElementById('backdrop'))}\r\n             {/* Создаём порталы для модального окна */}\r\n      {ReactDOM.createPortal(<Modal title={props.title} message={props.message} onCloseModal={props.onCloseModal}/>, document.getElementById('modal'))}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ErrorModal;\r\n","// Коценция с Refs наиболее приемлема дял нашего функционала.\r\n\r\nimport React, {useState, useRef, Fragment} from \"react\"\r\nimport Card from \"../UI/Card\"\r\nimport Button from \"../UI/Button\"\r\n\r\nimport styles from \"./CreateUser.module.css\"\r\nimport ErrorModal from \"../UI/ErrorModal\"\r\n\r\n\r\nconst CreateUser = (props) => {\r\n\r\n  const nameInputRef = useRef();\r\n  const ageInputRef = useRef();\r\n\r\n   // const[inputName, setInputName] = useState(''); // где inputName - переменная состояния, а setInputName - функция.\r\n   // const[inputAge, setInputAge] = useState(''); // где inputAge - переменная состояния, а setInputAge - функция.\r\n    const[error, setError] = useState(); // где error - переменная состояния, а setError - функция.\r\n\r\n    const createUserHandler = (event) => {// Создаёт нового пользователя на основе введённых данных в поля.\r\n           event.preventDefault();\r\n           const inputUserName = nameInputRef.current.value;\r\n           const inputUserAge = ageInputRef.current.value;\r\n           // Проверяем чтобы инпуты не были пустыми\r\n           if(inputUserName.trim().length === 0 || inputUserAge.trim().length === 0){\r\n            setError({\r\n                title:'Некорректный ввод',\r\n                message:'Эти поля не могут быть пустыми'\r\n            })\r\n            return;\r\n           } \r\n           // Прверяем чтобы возраст не был меньше значения единицы\r\n           if(+inputUserAge < 1){\r\n            setError({\r\n                title:'Некорректный возраст',\r\n                message:'Возраст должен быть больше 0'\r\n            })\r\n            return;\r\n           }\r\n           // Стираем значения из переменных inputName и inputName в момент нажатия на кнопку Button;\r\n          props.onCreateUser(inputUserName, inputUserAge)\r\n          nameInputRef.current.value = '';\r\n          ageInputRef.current.value = '';\r\n    };\r\n    // const nameChangeHandler = (event) => {// Эта функция отслеживает инпут name и записывает его значение в переменную inputName\r\n    //     setInputName(event.target.value);\r\n    // }\r\n    // const ageChangeHandler = (event) => {// Эта функция отслеживает инпут age и записывает его значение в переменную inputAge\r\n    //     setInputAge(event.target.value);\r\n    // }\r\n\r\n    const errorHandler = () => {\r\n        setError(false)\r\n    }\r\n\r\n   return (\r\n    // Записываем вместо div и не забываем импортировать в начале компонента\r\n    <Fragment>\r\n      {error && (\r\n        <ErrorModal\r\n          onCloseModal={errorHandler}\r\n          title={error.title}\r\n          message={error.message}\r\n        />\r\n      )}\r\n      <Card className={styles.input}>\r\n        <form onSubmit={createUserHandler}>\r\n          <label htmlFor=\"name\">Имя</label>\r\n          <input\r\n            id=\"name\"\r\n            type=\"text\"   \r\n            ref={nameInputRef}\r\n          />\r\n          <label htmlFor=\"age\">Возраст</label>\r\n          <input\r\n            id=\"age\"\r\n            type=\"number\"\r\n            ref={ageInputRef}\r\n          />\r\n          <Button type=\"submit\">Добавить Пользователя</Button>\r\n        </form>\r\n      </Card>\r\n    </Fragment>\r\n  );\r\n}\r\nexport default CreateUser;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // Концепция с useState (является излишне функциональной для нашего проекта.Можно заменить на Refs)\r\n\r\n// import React, {useState, Fragment} from \"react\"\r\n// import Card from \"../UI/Card\"\r\n// import Button from \"../UI/Button\"\r\n\r\n// import styles from \"./CreateUser.module.css\"\r\n// import ErrorModal from \"../UI/ErrorModal\"\r\n\r\n\r\n// const CreateUser = (props) => {\r\n\r\n//     const[inputName, setInputName] = useState(''); // где inputName - переменная состояния, а setInputName - функция.\r\n//     const[inputAge, setInputAge] = useState(''); // где inputAge - переменная состояния, а setInputAge - функция.\r\n//     const[error, setError] = useState(); // где error - переменная состояния, а setError - функция.\r\n\r\n//     const createUserHandler = (event) => {// Создаёт нового пользователя на основе введённых данных в поля.\r\n//            event.preventDefault();\r\n//            // Проверяем чтобы инпуты не были пустыми\r\n//            if(inputName.trim().length === 0 || inputAge.trim().length === 0){\r\n//             setError({\r\n//                 title:'Некорректный ввод',\r\n//                 message:'Эти поля не могут быть пустыми'\r\n//             })\r\n//             return;\r\n//            } \r\n//            // Прверяем чтобы возраст не был меньше значения единицы\r\n//            if(+inputAge < 1){\r\n//             setError({\r\n//                 title:'Некорректный возраст',\r\n//                 message:'Возраст должен быть больше 0'\r\n//             })\r\n//             return;\r\n//            }\r\n//            // Стираем значения из переменных inputName и inputName в момент нажатия на кнопку Button;\r\n//           props.onCreateUser(inputName, inputAge)\r\n//            setInputName('');\r\n//            setInputAge('');\r\n//     };\r\n//     const nameChangeHandler = (event) => {// Эта функция отслеживает инпут name и записывает его значение в переменную inputName\r\n//         setInputName(event.target.value);\r\n//     }\r\n//     const ageChangeHandler = (event) => {// Эта функция отслеживает инпут age и записывает его значение в переменную inputAge\r\n//         setInputAge(event.target.value);\r\n//     }\r\n\r\n//     const errorHandler = () => {\r\n//         setError(false)\r\n//     }\r\n\r\n//    return (\r\n//     // Записываем вместо div и не забываем импортировать в начале компонента\r\n//     <Fragment>\r\n//       {error && (\r\n//         <ErrorModal\r\n//           onCloseModal={errorHandler}\r\n//           title={error.title}\r\n//           message={error.message}\r\n//         />\r\n//       )}\r\n//       <Card className={styles.input}>\r\n//         <form onSubmit={createUserHandler}>\r\n//           <label htmlFor=\"name\">Имя</label>\r\n//           <input\r\n//             id=\"name\"\r\n//             type=\"text\"\r\n//             onChange={nameChangeHandler}\r\n//             value={inputName}\r\n//           />\r\n//           <label htmlFor=\"age\">Возраст</label>\r\n//           <input\r\n//             id=\"age\"\r\n//             type=\"number\"\r\n//             onChange={ageChangeHandler}\r\n//             value={inputAge}\r\n//           />\r\n//           <Button type=\"submit\">Добавить Пользователя</Button>\r\n//         </form>\r\n//       </Card>\r\n//     </Fragment>\r\n//   );\r\n// }\r\n// export default CreateUser;\r\n\r\n\r\n","import Card from \"../UI/Card\";\r\nimport styles from \"./UserList.module.css\"\r\nconst UserList = (props) => {\r\n    return (\r\n    <Card className={styles.users}>\r\n        <ul>\r\n            {props.users.map((user) => (\r\n            <li key={user.id}>\r\n                {user.name} - {user.age} лет\r\n            </li>\r\n            ))}\r\n        </ul>\r\n    </Card>\r\n    )\r\n};\r\nexport default UserList;","import CreateUser from \"./components/Users/CreateUser\";\r\nimport UserList from \"./components/Users/UserLIst\";\r\nimport React, {useState} from \"react\";\r\n\r\nconst App = () => {\r\n  const [userList, setUserList] = useState([])\r\n\r\n  // функция добавления нового пользователя\r\n  const CreateUserHandler = (name, age) => {\r\n// prevUserList - принимаем в качесстве аргумента предыдущее состояние массива списка пользователей\r\n    setUserList((prevUserList)=>{\r\n      // В теле функции возвращаем обновлённое состояние\r\n      // id: Math.random().toString() - Создаём уникальный рандомный id для каждого пользователя\r\n      return [...prevUserList, {name: name, age: age, id: Math.random().toString()}];\r\n\r\n\r\n    })\r\n  }\r\n\r\n  return (\r\n  <React.Fragment>\r\n          <h1>Приложение по учёту возраста людей</h1>  \r\n          <CreateUser onCreateUser={CreateUserHandler}/>\r\n          <UserList users={userList}/>\r\n  </React.Fragment>\r\n  )\r\n};\r\n\r\nexport default App;\r\n ","import ReactDOM from \"react-dom\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}